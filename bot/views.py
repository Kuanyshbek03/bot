from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Payment  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, —É —Ç–µ–±—è –µ—Å—Ç—å –º–æ–¥–µ–ª—å Payment –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
import psycopg2
from django.db import connection  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π —á–µ—Ä–µ–∑ Django
import asyncio
import logging
from telegram import Bot
from django.shortcuts import render, redirect, get_object_or_404
from .models import ReferralSource, Visit
from django.utils import timezone
from django.http import HttpResponseRedirect
from .models import ShortLink
from django.shortcuts import redirect, get_object_or_404
from .forms import ShortLinkForm
from .utils import generate_short_code
def redirect_to_statistics(request):
    return HttpResponseRedirect('/admin/bot/botstatistics/statistics/')




def index(request):
    return render(request, 'bot/index.html')

from django.shortcuts import render, redirect
from django.http import JsonResponse
import json

def wheel_view(request):
    return render(request, 'bot/wheel.html')



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('myapp')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def connect_db():
    return psycopg2.connect(
        host="localhost",
        database="Pardev",
        user="postgres",
        password="P@$$w0rd"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    )

API_TOKEN = '7339050381:AAER1DCSwq0wrXOXjbolDmeqDZ524Vqzv4o'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ, –æ—Ç–º–µ—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ "–æ–ø–ª–∞—á–µ–Ω–æ"
def mark_as_paid(telegram_id, payment_time):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ is_paid –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã.
    """
    with connect_db() as conn:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        cursor = conn.cursor()
  
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã
        cursor.execute('''
            SELECT delivered_at 
            FROM bot_statistics
            WHERE telegram_id = %s AND delivered_at < %s
            ORDER BY delivered_at DESC
            LIMIT 1;
        ''', (str(telegram_id), payment_time))
        
        last_message_time = cursor.fetchone()

        if last_message_time:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute('''
                UPDATE bot_statistics
                SET is_paid = TRUE
                WHERE telegram_id = %s AND delivered_at = %s;
            ''', (str(telegram_id), last_message_time[0]))
            conn.commit()  # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

            print(f"Updated is_paid for user {telegram_id} after message at {last_message_time[0]}")
        else:
            print(f"No messages found for user {telegram_id} before payment time {payment_time}")

async def send_congratulatory_message(telegram_id):
    bot = Bot(token=API_TOKEN)
    message_text = """
–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –º–∞—Ä–∞—Ñ–æ–Ω–∞üî•üî•üî•

–¢—ã –Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–π –ø—É—Ç—å —Å AIEL, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∏–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.

–°—Ç–∞—Ä—Ç –º–∞—Ä–∞—Ñ–æ–Ω–∞ - 16 —Å–µ–Ω—Ç—è–±—Ä—è
    """
    try:
        await bot.send_message(chat_id=telegram_id, text=message_text)
    except Exception as e:
        logger.error(f"Failed to send message to {telegram_id}: {e}")

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message_sync(telegram_id):
    asyncio.run(send_congratulatory_message(telegram_id))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

@csrf_exempt
def payment_success(request):
    if request.method == 'POST':
        order_id = request.POST.get('order_id')  # –ü–æ–ª—É—á–∞–µ–º order_id –æ—Ç Kaspi

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ order_id
            payment = Payment.objects.get(external_num=order_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            payment.is_paid = True
            payment.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            send_message_sync(payment.telegram_id)

            # –û—Ç–º–µ—á–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å
            mark_as_paid(payment.telegram_id, payment.updated_at)

            return JsonResponse({'status': 'success'}, status=200)
        except Payment.DoesNotExist:
            logger.error(f"Payment with order_id {order_id} not found")
            return JsonResponse({'status': 'error', 'message': 'Payment not found'}, status=404)
        except Exception as e:
            logger.error(f"Unexpected error for order_id {order_id}: {e}")
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)
    else:
        return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)



def redirect_short_link(request, short_code):
    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∫–æ–¥—É
    link = get_object_or_404(ShortLink, short_code=short_code)
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
    link.click_count += 1
    link.save()
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π URL (—Å–∞–π—Ç Telegram-–±–æ—Ç–∞)
    return redirect('https://t.me/Fitnes_Almaty_bot')

def create_short_link_view(request):
    if request.method == 'POST':
        form = ShortLinkForm(request.POST)
        if form.is_valid():
            short_link = form.save(commit=False)
            short_link.short_code = generate_short_code()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–¥–∞
            short_link.save()
            short_url = request.build_absolute_uri(f'/{short_link.short_code}/')
            return render(request, 'create_short_link.html', {'form': form, 'short_url': short_url})
    else:
        form = ShortLinkForm()

    return render(request, 'create_short_link.html', {'form': form})


