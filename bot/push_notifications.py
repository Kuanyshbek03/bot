import logging
from .utils import has_user_paid, connect_db
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio

logger = logging.getLogger(__name__)



async def send_scheduled_notification(bot, chat_id, content: dict) -> None:
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    
    if has_user_paid(chat_id):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    content_type = content.get("type")
    text = content.get("text")
    buttons = content.get("buttons", [])

    # –°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    keyboard = []
    if buttons:
        keyboard = [[InlineKeyboardButton(text=btn["text"], url=btn["url"]) for btn in buttons]]

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ reply_markup —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏

    try:
        if content_type == "message":
            await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='Markdown')
        elif content_type == "photo":
            photo_path = content.get("photo_path", "")
            with open(photo_path, 'rb') as photo:
                await bot.send_photo(chat_id=chat_id, photo=photo, caption=text, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {content_type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {content_type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


def get_unpaid_users():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT telegram_id FROM users WHERE telegram_id NOT IN (SELECT telegram_id FROM bot_payment WHERE is_paid = TRUE)')
    users = cursor.fetchall()
    conn.close()
    return [user[0] for user in users]

async def test_send_message(bot):
    await bot.send_message(chat_id=932249521, text="Test message")
    #asyncio.ensure_future(test_send_message(bot))

def add_notification_jobs(scheduler: AsyncIOScheduler, bot) -> None:
    unpaid_users = get_unpaid_users() # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID

    notification_schedule = [
                {
            "day": 25,
            "hour": 14,
            "minute": 17,  # –¢—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            "content": {
                "type": "photo",
                "photo_path": r"C:\Users\Kuanysh\–ó–∞–≥—Ä—É–∑–∫–∏\5429390754876351551.jpg",
                "text": """
*–ü–û–°–õ–ï–î–ù–ò–ï 3 –ß–ê–°–ê* üïí

–≠—Ç–æ —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É!

–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ–±—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç ‚ùå

–ù–µ —É–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç ‚Äî –¥–µ–π—Å—Ç–≤—É–π —Å–µ–π—á–∞—Å –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è –≤–º–µ—Å—Ç–µ —Å AIEL üíó
""",
                "button_text": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å"
            }
        },
        {
            "day": 25,
            "hour": 14,
            "minute": 20,  # –ú–∏–Ω—É—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–∏—Å–ª–æ–º
            "content": {
                "type": "photo",
                "photo_path": r"C:\Users\Kuanysh\–ó–∞–≥—Ä—É–∑–∫–∏\5429390754876351551.jpg",
                "text": """
*–ü–û–°–õ–ï–î–ù–ò–ï 3 –ß–ê–°–ê* üïí

–≠—Ç–æ —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É!

–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ–±—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç ‚ùå

–ù–µ —É–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç ‚Äî –¥–µ–π—Å—Ç–≤—É–π —Å–µ–π—á–∞—Å –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è –≤–º–µ—Å—Ç–µ —Å AIEL üíó
""",
                "button_text": "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
            }
        },
    ]

    for chat_id in unpaid_users:
        for schedule1 in notification_schedule:
            try:
                job_id = f"notification_{schedule1['day']}_{schedule1['hour']}_{chat_id}"
                scheduler.add_job(
                    send_scheduled_notification,
                    trigger=CronTrigger(day=schedule1["day"], hour=schedule1["hour"], minute=schedule1["minute"]),
                    args=[bot, chat_id, schedule1["content"]], 
                    id=job_id, 
                    replace_existing=True
                )
                logger.info(f"–ó–∞–¥–∞—á–∞ {job_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è {chat_id}: {e}")
