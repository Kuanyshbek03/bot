from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    CallbackContext,
)
from datetime import datetime, timedelta
from apscheduler.triggers.date import DateTrigger
import os
import logging
from .utils import connect_db, has_user_paid, save_statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MANAGER_LINK = 'https://t.me/osyraq'

def save_task(telegram_id, task_type, start_time, next_run_time):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO tasks (telegram_id, task_type, start_time, next_run_time) VALUES (%s, %s, %s, %s) RETURNING id',
        (telegram_id, task_type, start_time, next_run_time)
    )
    task_id = cursor.fetchone()[0]
    conn.commit()
    conn.close()
    logger.info(f"Task saved with ID {task_id} for telegram_id {telegram_id} at {next_run_time}")
    return task_id


async def start_second_wave(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–•–æ—á—É –≤–∏–¥–µ–æ"
    item_free = InlineKeyboardButton(text='–•–æ—á—É –≤–∏–¥–µ–æ', callback_data='second_wave_free_video')
    keyboard = [[item_free]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ö–∞—Ä—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–•–æ—á—É –≤–∏–¥–µ–æ".',
        reply_markup=reply_markup
    )

async def send_trial_lesson_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
    await send_free_video(chat_id, context)

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
    video_delete_time = datetime.now() + timedelta(hours=12)
    task_id = save_task(chat_id, "delete_video", datetime.now(), video_delete_time)
    context.job_queue.scheduler.add_job(
        run_task,
        trigger=DateTrigger(run_date=video_delete_time),
        args=[context.bot, task_id, chat_id, "delete_video"],
        id=f"task_{task_id}",
        replace_existing=True
    )

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
    first_push_time = datetime.now() + timedelta(seconds=30)
    task_id = save_task(chat_id, "second_wave_first_push", datetime.now(), first_push_time)
    context.job_queue.scheduler.add_job(
        run_task,
        trigger=DateTrigger(run_date=first_push_time),
        args=[context.bot, task_id, chat_id, "second_wave_first_push"],
        id=f"task_{task_id}",
        replace_existing=True
    )

    # –ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—É—à–∞
    second_push_time = first_push_time + timedelta(hours=2)
    task_id = save_task(chat_id, "second_wave_second_push", datetime.now(), second_push_time)
    context.job_queue.scheduler.add_job(
        run_task,
        trigger=DateTrigger(run_date=second_push_time),
        args=[context.bot, task_id, chat_id, "second_wave_second_push"],
        id=f"task_{task_id}",
        replace_existing=True
    )

async def send_free_video(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    video_path = r'C:\\Users\\Kuanysh\\–ó–∞–≥—Ä—É–∑–∫–∏\\WhatsApp Video 2024-04-18 at 00.52.04.mp4'
    if video_path and os.path.exists(video_path):
        with open(video_path, 'rb') as video_file:
            await context.bot.send_video(
                chat_id=chat_id,
                video=InputFile(video_file),
                caption="–õ–æ–≤–∏ —Å–≤–æ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ.\n‚åõÔ∏è(–≤–∏–¥–µ–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤)",
                protect_content=True
            )

async def run_task(bot, task_id, telegram_id, task_type, message_id=None):
    logger.info(f"Running task {task_type} for telegram_id {telegram_id} at {datetime.now()}")

    if task_type == "delete_video" and message_id:
        await delete_video(bot, telegram_id, message_id)
    elif task_type == "second_wave_first_push":
        text =   '''
–ö–∞–∫ —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?üòç

üíó–ú—ã —Å —Ç–æ–±–æ–π —Å–¥–µ–ª–∞–ª–∏ 4 –ú–û–©–ù–´–ï —Ç–µ—Ö–Ω–∏–∫–∏:

1. –î–ª—è –∏–∑–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç —Ö–æ–ª–∫–∏
2. –î–ª—è –ø–æ–¥—Ç—è–∂–∫–∏ —É–≥–ª–∞ –º–æ–ª–æ–¥–æ—Å—Ç–∏
3. –ü—Ä–æ—Ç–∏–≤ —Å–∫–æ–ª–∏–æ–∑–∞
4. –û—Ç –Ω–∞–≤–∏—Å—à–∏—Ö –≤–µ–∫

–ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Ç–æ –≤—Å–µ–≥–æ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π —Ç—ã —É–∂–µ —É–≤–∏–¥–∏—à—å –ò–ó–ú–ï–ù–ï–ù–ò–Ø! üî•

üòÆ‚Äçüí® –ù–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ù–ê–ß–ê–õ–û! –ú—ã —Å–Ω—è–ª–∏ –µ—â—ë 36 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è —Ñ–µ–π—Å –ø–ª–∞—Å—Ç–∏–∫–∏, –æ—Å–∞–Ω–∫–∏ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ

üíó –°—Ç–∞—Ä—Ç: 16 —Å–µ–Ω—Ç—è–±—Ä—è
üíó –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 –Ω–µ–¥–µ–ª–∏ + 1 –±–æ–Ω—É—Å–Ω–∞—è –Ω–µ–¥–µ–ª—è
üíó –¶–µ–Ω–∞: 4 990 —Ç–µ–Ω–≥–µ (–≤–º–µ—Å—Ç–æ 14 990 —Ç–µ–Ω–≥–µ‚ùå)

–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—Å—Ç—É–ø–∞–π –≤ –º–∞—Ä–∞—Ñ–æ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üëá'''
        stage = "second_wave_first_push"
        media_path= r"C:\Users\Kuanysh\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Pardev\pardev\media\notifications\images\bmw.jpeg"
        media_type="photo"
        button_text = "–ó–∞–Ω—è—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ"
        await send_push_notification(bot, telegram_id, text, button_text, media_path, media_type,stage)
    elif task_type == "second_wave_second_push":
        text = '''
–¢–´ –¢–û–ñ–ï –£–°–¢–ê–õ–ê –û–¢ –ö–†–ò–í–û–ô –û–°–ê–ù–ö–ò? üò•

–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤ –Ω–∞—à–µ–º –Ω–æ–≤–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –û–°–ê–ù–ö–ò –æ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ú–∞–ª–∏–∫–∏ —Ö–∞–Ω—ã–º! üòå

–ù–æ —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å—ë! –ù–∞—à –º–∞—Ä–∞—Ñ–æ–Ω ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í–Ω—É—Ç—Ä–∏ —Ç–µ–±—è –∂–¥—É—Ç:

üíó –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥, –π–æ–≥–∞ ‚Äî –≤—Å—ë –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –∏ —Ç–æ–Ω—É—Å–∞!
üíó –£—Ä–æ–∫–∏ –æ—Ç —Å–µ–∫—Å–æ–ª–æ–≥–∞ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–∏–º–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
üíó –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é ‚Äî –≤–∫—É—Å–Ω–æ, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ
üíó –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏ —Ç–µ–ª–∞ –∏ —Ä–∞–∑—É–º–∞
üíó –õ–∏—á–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä —Å –≥—Ä–∞—Ñ–∏–∫–æ–º 24/7

–ó–ê–ë–ò–†–ê–ô –°–í–û–ï –ú–ï–°–¢–û, –ü–û–ö–ê –û–ù–û –ù–ï –î–û–°–¢–ê–õ–û–°–¨ –î–†–£–ì–ò–ú! üëá'''
        stage = "second_wave_second_push"
        media_type="photo" 
        media_path = r"C:\Users\Kuanysh\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Pardev\pardev\media\notifications\images\bmw.jpeg"  # –£–±–µ—Ä–∏—Ç–µ –∑–∞–ø—è—Ç—É—é
        button_text = "–ó–∞–Ω—è—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ"
        await send_push_notification(bot, telegram_id, text, button_text, media_path, media_type,stage)

    # –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('UPDATE tasks SET is_completed = TRUE WHERE id = %s', (task_id,))
    conn.commit()
    conn.close()
    logger.info(f"Task {task_id} for telegram_id {telegram_id} marked as completed")


async def send_push_notification(bot, telegram_id: int, text: str, button_text: str, media_path: str = None, media_type: str = None, stage: str = None) -> None:
    if has_user_paid(telegram_id):
        logger.info(f"Skipping push notification for {telegram_id} as they have already paid.")
        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    short_message = (text[:50] + '...' ) if len(text) > 50 else text

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (stage)
    unique_identifier = f"{stage}" if stage else None

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    item_bought = InlineKeyboardButton(text=button_text, callback_data='enroll')
    keyboard = [[item_bought]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        logger.info(f"Preparing to send notification to {telegram_id}. Media type: {media_type}, Media path: {media_path}")

        if media_type == "photo" and media_path and os.path.exists(media_path):
            logger.info(f"Sending photo to {telegram_id}.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            with open(media_path, 'rb') as media:
                await bot.send_photo(
                    chat_id=telegram_id,
                    photo=media,
                    caption=text,
                    reply_markup=reply_markup,
                    protect_content=True
                )
        elif media_type == "video" and media_path and os.path.exists(media_path):
            logger.info(f"Sending video to {telegram_id}.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            with open(media_path, 'rb') as media:
                await bot.send_video(
                    chat_id=telegram_id,
                    video=media,
                    caption=text,
                    reply_markup=reply_markup,
                    protect_content=True
                )
        else:
            logger.info(f"Sending text message to {telegram_id}. No media provided.")
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ñ–æ—Ç–æ, –Ω–∏ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            await bot.send_message(
                chat_id=telegram_id,
                text=text,
                reply_markup=reply_markup,
                protect_content=True
            )
        logger.info(f"Push notification sent to {telegram_id} with message: {text}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        save_statistics(telegram_id, short_message, unique_identifier)

    except Exception as e:
        logger.error(f"Failed to send push notification to {telegram_id}: {e}")


async def delete_video(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
        logger.info(f"Video message {message_id} for telegram_id {chat_id} deleted.")
    except Exception as e:
        logger.error(f"Failed to delete video message {message_id} for telegram_id {chat_id}: {e}")